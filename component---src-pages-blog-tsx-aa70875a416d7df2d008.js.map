{"version":3,"sources":["webpack:///./src/pages/blog.tsx","webpack:///./src/graphql/queries.ts"],"names":["Index","nodes","useStaticQuery","allMarkdownRemark","Menu","Card","map","post","frontmatter","draft","key","title"],"mappings":"iKA+BeA,UA1Bf,WAA+B,IAENC,ECqEhBC,yBA9BmB,cDvCxBC,kBAAqBF,MAGvB,OACE,oCACE,6BACE,kBAACG,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,KAEGJ,EAAMK,KAAI,SAACC,GAGV,IAFcA,EAAKC,YAAYC,MAM7B,OAAO,kBAACJ,EAAA,EAAD,eAAMK,IAAKH,EAAKC,YAAYG,OAAWJ,EAAKC","file":"component---src-pages-blog-tsx-aa70875a416d7df2d008.js","sourcesContent":["import React, { ReactElement } from \"react\"\nimport { Menu } from \"../components/Header/Menu\"\nimport { CardContainer, Card } from \"../components/Card\"\nimport { useQueryAllBlogPosts } from \"../graphql/queries\"\n\nfunction Index(): ReactElement {\n  const {\n    allMarkdownRemark: { nodes },\n  } = useQueryAllBlogPosts()\n\n  return (\n    <>\n      <div>\n        <Menu />\n      </div>\n      <CardContainer>\n        {/* eslint-disable-next-line array-callback-return */}\n        {nodes.map((post) => {\n          const draft = post.frontmatter.draft\n\n          if (\n            (process.env.NODE_ENV === \"production\" && !draft) ||\n            process.env.NODE_ENV === \"development\"\n          )\n            return <Card key={post.frontmatter.title} {...post.frontmatter} />\n        })}\n      </CardContainer>\n    </>\n  )\n}\n\nexport default Index\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport interface AllBlogPostsQuery {\n  allMarkdownRemark: AllMarkdownRemark\n  extensions: Extensions\n}\n\nexport interface AllMarkdownRemark {\n  nodes: Node[]\n}\n\nexport interface Node {\n  frontmatter: Frontmatter\n}\n\nexport interface Frontmatter {\n  draft: boolean\n  title: string\n  description: string\n  createdDate: string\n  tags: string\n  path: string\n  image: Image | null\n}\n\nexport interface Image {\n  id: string\n  childImageSharp: ChildImageSharp\n}\n\nexport interface ChildImageSharp {\n  fluid: Fluid\n}\n\nexport interface Fluid {\n  base64: string\n  aspectRatio: number\n  sizes: string\n  src: string\n  srcSet: string\n}\n\nexport interface Extensions {}\n\nexport interface Extensions {}\n\nexport const AllBlogPosts = graphql`\n  query AllPosts {\n    allMarkdownRemark {\n      nodes {\n        frontmatter {\n          draft\n          title\n          description\n          createdDate\n          tags\n          path\n          image {\n            id\n            childImageSharp {\n              fluid {\n                base64\n                aspectRatio\n                sizes\n                src\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const useQueryAllBlogPosts = () => {\n  return useStaticQuery<AllBlogPostsQuery>(AllBlogPosts)\n}\n"],"sourceRoot":""}